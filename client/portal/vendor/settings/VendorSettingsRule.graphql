fragment VendorRuleFieldDynamic on ConditionFieldDynamic {
  __typename
  ... on ConditionFieldAddress {
    comparator
    type
    postals
  }
  ... on ConditionFieldDate {
    type
    comparator
    dow {
      comparator
      days
      holidays
      windowStart
      windowStop
    }
    time {
      start
      stop
    }
  }
  ... on ConditionFieldSelect {
    type
    comparator
    valueId
  }
}

fragment VendorRuleField on ConditionField {
  fieldId
  existence
  dynamic {
    ...VendorRuleFieldDynamic
  }
}

fragment VendorRulePerformable on ConditionPerformableMetadata {
  performableId
  existence
  field {
    ...VendorRuleField
  }
}

fragment VendorRule on Rule {
  id
  name
  conditions {
    ...VendorCondition
  }
  actions {
    __typename
    id
    type
    ... on ActionFieldShow {
      fieldShow: metadata {
        fieldId
        visible
      }
    }
    ... on ActionFieldDisable {
      field: metadata {
        disabled
        fieldId
      }
    }
    ... on ActionOrderExpense {
      orderExpense: metadata {
        amount
        amountType
        line
        split
      }
    }
    ... on ActionOrderRevenue {
      orderRevenue: metadata {
        amountType
        amount
        line
      }
    }
    ... on ActionJobExpense {
      jobExpense: metadata {
        amount
        amountType
        providerMemberId
        line
        performableId
        fieldId
        fieldOptionId
      }
    }

    ... on ActionJobRevenue {
      jobRevenue: metadata {
        performableId
        amountType
        fieldId
        line
        fieldOptionId
        amount
      }
    }
    ... on ActionAssignProvider {
      assignProvider: metadata {
        performableId
        providerId
      }
    }
    ... on ActionAssignUser {
      assignUser: metadata {
        performableId
        userId
      }
    }
    ... on ActionAttachFiles {
      attachFiles: metadata {
        notificationType
        attachments {
          name
          url
          mime
        }
      }
    }
  }
}

query VendorRuleAll($vendorId: ID!) {
  vendor(memberId: $vendorId) {
    id
    rules {
      id
      name
    }
  }
}

mutation VendorRuleSave($vendorId: ID!, $write: RuleWrite!) {
  saveRule(memberId: $vendorId, data: $write) {
    ...VendorRule
  }
}

mutation VendorRuleArchive($ruleId: ID!) {
  archiveRule(ruleId: $ruleId)
}
